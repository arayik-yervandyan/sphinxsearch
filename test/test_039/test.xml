<?xml version="1.0" encoding="utf-8"?>
<test>

<name>distributed updates</name>

<config>
indexer
{
	mem_limit			= 16M
}

searchd
{
	<searchd_settings/>
	max_filter_values 	= 500000
	max_packet_size 	= 18M
	dist_threads			= 4
	read_timeout			= 1
	workers = threads
}

source src1
{
	type			= mysql
	<sql_settings/>

	sql_query		= SELECT id, group_id, title, mva FROM test_table
	sql_attr_uint	= group_id
	sql_attr_multi = uint mva from field
}

source src2 : src1
{
	sql_query		= SELECT 10+id, group_id, title, mva FROM test_table
}

source src_i1
{
	type			= mysql
	<sql_settings/>
	sql_query = SELECT id, title, group_id as gid FROM test_table
	sql_attr_uint	= gid
}

source src_i2
{
	type			= mysql
	<sql_settings/>
	sql_query = SELECT id + 100, title, group_id as gid FROM test_table
	sql_attr_uint	= gid
}
<agent0>
index block1
{
	source			= src1
	path			= <data_path/>/block1
	docinfo			= extern
	min_word_len	= 1
}
</agent0>

<agent1>
index block2
{
	source			= src2
	path			= <data_path/>/block2
	docinfo			= extern
	min_word_len	= 1
}

index dist_agent_2
{
	source			= src1
	path			= <data_path/>/dist_agent_2
	docinfo			= extern
}

</agent1>

<agent0>
index dist
{
	type					= distributed
	local					= block1
	agent					= <agent_address/>:block2
	agent_connect_timeout	= 1000
	agent_query_timeout		= 3000
}

index dist2
{
	type					= distributed
	agent					= <agent_address/>:dist_agent_2
	agent_connect_timeout	= 1000
	agent_query_timeout		= 3000
}

index i1
{
	source			= src_i1
	path			= <data_path/>/i1
    docinfo			= extern
}

index i2
{
	source			= src_i2
	path			= <data_path/>/i2
    docinfo			= extern
}

index rt
{
	type = rt
	path			= <data_path/>/rt
	docinfo = extern
	rt_mem_limit = 128k
	rt_field		= title
	rt_attr_uint	= gid
}
</agent0>
</config>

<num_agents>2</num_agents>

<custom_test>
<![CDATA[
$results = array ();

$res = $client->Query ( "", "dist" );
if ( !$res )
{
	$results[] = $client->GetLastError();
	return;
}
unset ( $res["time"] );
$results[] = $res;

$res = $client->UpdateAttributes ( "dist", array("group_id"), array(11=>array(123)) );
if ( $res===false )
{
	$results[] = $client->GetLastError();
	return;
}
$results[] = $res;
$res = $client->UpdateAttributes ( "dist", array("mva"), array ( 4=>array(array(1001, 1002)), 11=>array(array(1011, 1012)) ), true );
if ( $res===false )
{
	$results[] = $client->GetLastError();
	return;
}
$results[] = $res;

$res = $client->Query ( "", "dist" );
if ( !$res )
{
	$results[] = $client->GetLastError();
	return;
}
unset ( $res["time"] );
$results[] = $res;

// here is going regression master fails to send 4k attributes to agent
$gid = array();
for ( $i=0; $i<50000; $i++ )
	$gid[] = $i;

$client->SetFilter ( 'group_id', $gid );
$res = $client->Query ( "", "dist2" );
if ( !$res )
{
	$results[] = $client->GetLastError();
	return;
}
unset ( $res["time"] );
$results[] = $res;

$make_sock = create_function ( '&$results, $agent=-1', '

	global $sd_address, $sd_sphinxql_port, $error, $agents;

	$sockStr = "$sd_address:$sd_sphinxql_port";
	if ($sd_address == "localhost")
		$sockStr = "127.0.0.1:$sd_sphinxql_port";
		
	if ( $agent>=0 )
	{
		$addr = $agents[$agent]["address"];
		$port = $agents[$agent]["sqlport"];
		if ($addr == "localhost")
			$sockStr = "127.0.0.1:$port";
		else
			$sockStr = "$addr:$port";
	}
		
	$sock = @mysql_connect ( $sockStr,"","", true );
	
	if ( $sock === false )
	{
		$results[] = "error: can not connect to searchd: " . @mysql_errno ( $sock ) . " : " . @mysql_error ( $sock );
	}
	return $sock;
');

$query = create_function ( '&$results, $q, $sock,$vars,$log_query=false', '
	
	if ( $log_query )
		$results[] = $q;
	
	$res = @mysql_query ( $q, $sock );
	if ($res===true)
	{
		$results[] = "total_affected:" . mysql_affected_rows($sock);
	}
	else if ($res===false)
	{
		$fail = "failed";
		if ( $log_query )
			$fail .= ", " . @mysql_errno ( $sock ) . " : " . @mysql_error ( $sock );
		$results[] = $fail;
	}
	else
	{
		$results[] = "ok";
		while ($row = @mysql_fetch_array($res, MYSQL_ASSOC))
		{
			$has_key = false;
			foreach ( $vars as $v )
				$has_key |=  in_array ( $v, $row );
			
			if ( count ( $vars )==0 )
				$has_key = true;
			
			if ( !$has_key )
				continue;
			
			$vals = "";
			foreach ($row as $v)
			{
				$vals .= $v . " ";
			}
			
			$results[] = trim ( $vals );
		}			
	}
');

$sock = $make_sock( $results );
if ( $sock === false )
	return;

$vars = array("connections", "command_status", "queries");
$query ( $results, "show status", $sock, $vars );
// regression crash on SphinxQL packet overflow max_packet_size
$ids = "2";
for ( $i=3; $i<400000; $i++ )
	$ids .= "    ,      " . $i;
$query ( $results, "show meta IN ( group_id,1,$ids ) as c1, IN ( group_id,1,$ids ) as c2, IN ( group_id,1,$ids ) as c3", $sock, array() );
@mysql_close($sock);
$sock = $make_sock( $results );
if ( $sock === false )
	return;
$query ( $results, "show status", $sock, $vars );

// regression crash on update of RT index that matches documents from different disk chunks
for ( $i=1000; $i<1660; $i++ )
{
	$title = '';
	for ( $w=0; $w<30; $w++ )
		$title .= "term" . $i . $w . " ";
		
	$query ( $results, "INSERT INTO rt ( id, gid, title) VALUES ($i, 11, '$title')", $sock, array('none') );
	array_pop ( $results );
}
$query ( $results, "UPDATE i1, i2 SET gid=333 WHERE id IN ( 2, 102 )", $sock, array() );
$query ( $results, "UPDATE i1, rt SET gid=333 WHERE id IN ( 3, 1003, 1333 )", $sock, array() );
$query ( $results, "SELECT * FROM i1, i2, rt WHERE id IN ( 1,2,3,4, 101,102,103,104, 1001,1002,1003,1004, 1331,1332,1333,1334, 2001, 2002, 2003, 2004 )", $sock, array() );

for ( $i=2000; $i<2010; $i++ )
{
	$title = '';
	for ( $w=0; $w<30; $w++ )
		$title .= "term" . $i . $w . " ";
		
	$query ( $results, "INSERT INTO rt ( id, gid, title) VALUES ($i, 11, '$title')", $sock, array('none') );
	array_pop ( $results );
}
$query ( $results, "UPDATE rt SET gid=444 WHERE id IN ( 3, 1003, 1333, 2003 )", $sock, array() );
$query ( $results, "SELECT * FROM i1, i2, rt WHERE id IN ( 1,2,3,4, 101,102,103,104, 1001,1002,1003,1004, 1331,1332,1333,1334, 2001, 2002, 2003, 2004 )", $sock, array() );

// regression @uservars at agents only
$query ( $results, "SET GLOBAL @var1 = (3,4,12,13)", $sock, array(), true );
$query ( $results, "SELECT * FROM dist", $sock, array(), true );
$query ( $results, "SELECT * FROM dist WHERE id in @var1", $sock, array(), true );

@mysql_close($sock);
$sock = $make_sock( $results, 1 );
$query ( $results, "SET GLOBAL @var1 = (3,4,12,13)", $sock, array(), true );

@mysql_close($sock);
$sock = $make_sock( $results, 0 );
$query ( $results, "SELECT * FROM dist WHERE id in @var1", $sock, array(), true );

$query ( $results, "SET GLOBAL @var1 = (1,4)", $sock, array(), true );
@mysql_close($sock);
$sock = $make_sock( $results, 1 );
$query ( $results, "SET GLOBAL @var1 = (11,12)", $sock, array(), true );

@mysql_close($sock);
$sock = $make_sock( $results, 0 );
$query ( $results, "SELECT * FROM dist WHERE id in @var1", $sock, array(), true );

// regression @uservars got sent by master to agents
$query ( $results, "SET INDEX dist2 GLOBAL @var2 = (1,4,11,12)", $sock, array(), true );
$query ( $results, "SELECT * FROM dist2 WHERE id in @var2", $sock, array(), true );
$query ( $results, "SELECT * FROM block1 WHERE id in @var3", $sock, array(), true );
$query ( $results, "SET INDEX dist GLOBAL @var3 = (1,4,11,12)", $sock, array(), true );
$query ( $results, "SELECT * FROM dist WHERE id in @var3", $sock, array(), true );
$query ( $results, "SELECT * FROM block1 WHERE id in @var3", $sock, array(), true );

]]>
</custom_test>

<db_create>
CREATE TABLE test_table
(
	id			INTEGER PRIMARY KEY NOT NULL AUTO_INCREMENT,
	group_id	INTEGER NOT NULL,
	title		VARCHAR(255) NOT NULL,
	mva		VARCHAR(255) NOT NULL
);
</db_create>

<db_drop>
DROP TABLE IF EXISTS test_table;
</db_drop>

<db_insert>
INSERT INTO test_table ( id, group_id, title, mva ) VALUES 
( 1, 1, 'test one', '10 11' ),
( 2, 1, 'test two', '10 11' ),
( 3, 2, 'test three', '10 11' ),
( 4, 2, 'test four', '10 11' )
</db_insert>

</test>
